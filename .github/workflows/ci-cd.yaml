name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Check code formatting with black
        run: |
          black --check app
        continue-on-error: true

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
      
      - name: Build Summary
        if: success()
        run: |
          echo "✅ Docker image built and pushed successfully!"
          echo ""
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"
          echo "🔨 Commit: ${{ github.sha }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

  deploy:
    name: Deploy to Server
    runs-on: self-hosted
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:

      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Debug environment
        run: |
          echo "=== DEBUG SECRETS ==="
          echo "DATABASE_URL length: ${#DATABASE_URL}"
          echo "SECRET_KEY length: ${#SECRET_KEY}"
          echo "MINIO_ENDPOINT: ${MINIO_ENDPOINT}"
          echo "PORT_API_SGPI: ${PORT_API_SGPI}"
          echo "===================="
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SGPI_SECRET_KEY }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          PORT_API_SGPI: ${{ vars.PORT_API_SGPI }}

      - name: Login to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      
      - name: Stop and remove old container
        run: |
          docker stop api-sgpi 2>/dev/null || true
          docker rm api-sgpi 2>/dev/null || true
      
      - name: Ensure Docker network exists
        run: |
          if ! docker network inspect nginx_proxy >/dev/null 2>&1; then
            echo "📡 Creating nginx_proxy network..."
            docker network create nginx_proxy
            echo "✅ Network nginx_proxy created"
          else
            echo "✅ Network nginx_proxy already exists"
          fi
      
      - name: Discover PostgreSQL network
        id: pg_network
        run: |
          # Extrair hostname do DATABASE_URL (se existir como container name)
          # Formato: postgresql://user:pass@host:port/db
          DB_HOST=$(echo "${{ secrets.DATABASE_URL }}" | sed -n 's/.*@\([^:/\?]*\).*/\1/p' || echo "")
          
          if [ -n "$DB_HOST" ]; then
            # Verificar se é um container existente
            if docker ps --format '{{.Names}}' | grep -q "^${DB_HOST}$" || docker ps -a --format '{{.Names}}' | grep -q "^${DB_HOST}$"; then
              echo "🔍 PostgreSQL container encontrado: ${DB_HOST}"
              # Descobrir a rede do container PostgreSQL
              PG_NETWORK=$(docker inspect ${DB_HOST} --format '{{range $net, $conf := .NetworkSettings.Networks}}{{$net}}{{println}}{{end}}' | head -1 | tr -d '\n' || echo "")
              
              if [ -n "$PG_NETWORK" ] && [ "$PG_NETWORK" != "nginx_proxy" ]; then
                echo "📡 PostgreSQL está na rede: ${PG_NETWORK}"
                echo "network=${PG_NETWORK}" >> $GITHUB_OUTPUT
              else
                echo "⚠️  PostgreSQL na rede padrão ou mesma rede que nginx_proxy"
                echo "network=" >> $GITHUB_OUTPUT
              fi
            else
              echo "ℹ️  PostgreSQL não é um container Docker (pode ser host externo)"
              echo "network=" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️  Não foi possível extrair hostname do DATABASE_URL"
            echo "network=" >> $GITHUB_OUTPUT
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Fix DATABASE_URL for container communication
        id: fix_db_url
        run: |
          DB_URL="${{ secrets.DATABASE_URL_SGPI }}"
          
          # Procurar por containers PostgreSQL rodando
          PG_CONTAINER=$(docker ps --format '{{.Names}}' | grep -i postgres | head -1 || echo "")
          
          if [ -n "$PG_CONTAINER" ]; then
            echo "🔍 PostgreSQL container encontrado: ${PG_CONTAINER}"
            
            # Descobrir a rede do container PostgreSQL
            PG_NETWORK=$(docker inspect ${PG_CONTAINER} --format '{{range $net, $conf := .NetworkSettings.Networks}}{{println $net}}{{end}}' | grep -v "^$" | head -1 | tr -d '\n' || echo "")
            
            if [ -n "$PG_NETWORK" ]; then
              echo "📡 PostgreSQL está na rede: ${PG_NETWORK}"
              echo "network=${PG_NETWORK}" >> $GITHUB_OUTPUT
            fi
            
            # Extrair partes do DATABASE_URL
            # Formato: postgresql://user:pass@host:port/db
            if echo "$DB_URL" | grep -q "@"; then
              # Extrair user:pass, host:port, db
              AUTH_PART=$(echo "$DB_URL" | sed -n 's|.*://\([^@]*\)@.*|\1|p')
              DB_PART=$(echo "$DB_URL" | sed -n 's|.*/\([^/?]*\).*|\1|p')
              
              # Usar porta interna do PostgreSQL (5432) ao conectar via container
              PG_PORT="5432"
              
              # Construir novo URL com nome do container e porta interna
              NEW_DB_URL="postgresql://${AUTH_PART}@${PG_CONTAINER}:${PG_PORT}/${DB_PART}"
              echo "📝 DATABASE_URL ajustado para usar container: ${NEW_DB_URL}"
              echo "url=${NEW_DB_URL}" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Formato de DATABASE_URL não reconhecido, usando original"
              echo "url=${DB_URL}" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️  Nenhum container PostgreSQL encontrado, usando DATABASE_URL original"
            echo "url=${DB_URL}" >> $GITHUB_OUTPUT
            echo "network=" >> $GITHUB_OUTPUT
          fi
      
      - name: Fix MINIO_ENDPOINT for container communication
        id: fix_minio
        run: |
          # Procurar por container MinIO rodando
          MINIO_CONTAINER=$(docker ps --format '{{.Names}}' | grep -i minio | head -1 || echo "")
          
          if [ -n "$MINIO_CONTAINER" ]; then
            echo "🔍 MinIO container encontrado: ${MINIO_CONTAINER}"
            
            # Descobrir a rede do container MinIO
            MINIO_NETWORK=$(docker inspect ${MINIO_CONTAINER} --format '{{range $net, $conf := .NetworkSettings.Networks}}{{println $net}}{{end}}' | grep -v "^$" | head -1 | tr -d '\n' || echo "")
            
            if [ -n "$MINIO_NETWORK" ]; then
              echo "📡 MinIO está na rede: ${MINIO_NETWORK}"
              echo "network=${MINIO_NETWORK}" >> $GITHUB_OUTPUT
            fi
            
            # Usar nome do container e porta interna (9000) para comunicação Docker
            MINIO_ENDPOINT_INTERNAL="${MINIO_CONTAINER}:9000"
            echo "📝 MINIO_ENDPOINT ajustado para container: ${MINIO_ENDPOINT_INTERNAL}"
            echo "endpoint=${MINIO_ENDPOINT_INTERNAL}" >> $GITHUB_OUTPUT
            echo "secure=false" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  Nenhum container MinIO encontrado, usando secrets originais"
            echo "endpoint=${{ secrets.MINIO_ENDPOINT }}" >> $GITHUB_OUTPUT
            echo "secure=${{ secrets.MINIO_SECURE }}" >> $GITHUB_OUTPUT
            echo "network=" >> $GITHUB_OUTPUT
          fi
      
      - name: Start new container
        env:
          DATABASE_URL: ${{ steps.fix_db_url.outputs.url }}
          SECRET_KEY: ${{ secrets.SGPI_SECRET_KEY }}
          MINIO_ENDPOINT: ${{ steps.fix_minio.outputs.endpoint }}
          MINIO_SECURE: ${{ steps.fix_minio.outputs.secure }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
          MINIO_PUBLIC_ENDPOINT: ${{ secrets.MINIO_PUBLIC_ENDPOINT }}
          MINIO_PUBLIC_SECURE: ${{ secrets.MINIO_PUBLIC_SECURE }}
          PORT: ${{ vars.PORT_API_SGPI }}
        run: |
          # Validar se secrets existem
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ ERROR: DATABASE_URL não está configurado!"
            exit 1
          fi
          
          if [ -z "$SECRET_KEY" ]; then
            echo "❌ ERROR: SECRET_KEY não está configurado!"
            exit 1
          fi
          
          # Definir porta do HOST (externa)
          HOST_PORT="${PORT:-8009}"
          # Porta interna do container (fixa em 8009)
          CONTAINER_PORT=8009
          
          echo "🚀 Iniciando container:"
          echo "   📍 Host: ${HOST_PORT} → Container: ${CONTAINER_PORT}"
          
          # Criar container na rede nginx_proxy
          docker run -d \
            --name api-sgpi \
            --restart unless-stopped \
            --network nginx_proxy \
            -p ${HOST_PORT}:${CONTAINER_PORT} \
            -e DATABASE_URL="${DATABASE_URL}" \
            -e SECRET_KEY="${SECRET_KEY}" \
            -e MINIO_ENDPOINT="${MINIO_ENDPOINT}" \
            -e MINIO_SECURE="${MINIO_SECURE}" \
            -e MINIO_ACCESS_KEY="${MINIO_ACCESS_KEY}" \
            -e MINIO_SECRET_KEY="${MINIO_SECRET_KEY}" \
            -e MINIO_BUCKET="${MINIO_BUCKET:-sgpi-files}" \
            -e MINIO_PUBLIC_ENDPOINT="${MINIO_PUBLIC_ENDPOINT}" \
            -e MINIO_PUBLIC_SECURE="${MINIO_PUBLIC_SECURE}" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Conectar à rede do PostgreSQL se necessário
          PG_NETWORK="${{ steps.fix_db_url.outputs.network }}"
          if [ -n "$PG_NETWORK" ] && [ "$PG_NETWORK" != "nginx_proxy" ]; then
            echo "🔗 Conectando container à rede PostgreSQL: ${PG_NETWORK}"
            docker network connect ${PG_NETWORK} api-sgpi || echo "⚠️  Não foi possível conectar à rede ${PG_NETWORK}"
          else
            echo "ℹ️  PostgreSQL na mesma rede ou rede não encontrada"
          fi
          
          # Conectar à rede do MinIO se necessário
          MINIO_NETWORK="${{ steps.fix_minio.outputs.network }}"
          if [ -n "$MINIO_NETWORK" ] && [ "$MINIO_NETWORK" != "nginx_proxy" ]; then
            echo "🔗 Conectando container à rede MinIO: ${MINIO_NETWORK}"
            docker network connect ${MINIO_NETWORK} api-sgpi || echo "⚠️  Não foi possível conectar à rede ${MINIO_NETWORK}"
          else
            echo "ℹ️  MinIO na mesma rede ou rede não encontrada"
          fi
      
      - name: Wait for container to start
        run: sleep 10
      
      - name: Verify deployment
        run: |
          if docker ps | grep -q api-sgpi; then
            echo "✅ Container iniciado com sucesso"
            docker ps --filter name=api-sgpi
            echo ""
            echo "Últimas 20 linhas do log:"
            docker logs --tail 20 api-sgpi
          else
            echo "❌ Falha ao iniciar container"
            docker logs api-sgpi
            exit 1
          fi
      
      - name: Cleanup old images
        if: success()
        run: |
          docker image prune -af --filter "until=24h" || true
      
      - name: Deployment Summary
        if: success()
        run: |
          echo "🚀 Deploy realizado com sucesso!"
          echo ""
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🔨 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          echo ""
          echo "Container status:"
          docker ps --filter name=api-sgpi --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

