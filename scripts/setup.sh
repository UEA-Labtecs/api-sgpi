#!/bin/bash
set -e

echo "=================================="
echo "üöÄ SGPI API - Setup Script"
echo "=================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "‚ÑπÔ∏è  $1"
}

# Verificar se Python est√° instalado
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 n√£o encontrado. Por favor, instale Python 3.11 ou superior."
    exit 1
fi

PYTHON_VERSION=$(python3 --version | awk '{print $2}')
print_success "Python $PYTHON_VERSION encontrado"

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    print_warning "Docker n√£o encontrado. Voc√™ precisar√° do Docker para executar o ambiente completo."
else
    print_success "Docker encontrado"
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_warning "Docker Compose n√£o encontrado. Voc√™ precisar√° do Docker Compose para executar o ambiente completo."
else
    print_success "Docker Compose encontrado"
fi

echo ""
echo "=================================="
echo "üì¶ Instala√ß√£o de Depend√™ncias"
echo "=================================="

# Criar ambiente virtual
if [ ! -d "venv" ]; then
    print_info "Criando ambiente virtual..."
    python3 -m venv venv
    print_success "Ambiente virtual criado"
else
    print_info "Ambiente virtual j√° existe"
fi

# Ativar ambiente virtual
print_info "Ativando ambiente virtual..."
source venv/bin/activate

# Atualizar pip
print_info "Atualizando pip..."
pip install --upgrade pip > /dev/null 2>&1
print_success "pip atualizado"

# Instalar depend√™ncias
print_info "Instalando depend√™ncias..."
pip install -r requirements.txt > /dev/null 2>&1
print_success "Depend√™ncias instaladas"

# Instalar Playwright browsers
print_info "Instalando browsers do Playwright..."
playwright install > /dev/null 2>&1
print_success "Playwright configurado"

echo ""
echo "=================================="
echo "üîß Configura√ß√£o"
echo "=================================="

# Verificar se .env existe
if [ ! -f ".env" ]; then
    print_warning ".env n√£o encontrado"
    echo ""
    read -p "Deseja criar um arquivo .env agora? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Criando .env..."
        cat > .env << 'EOF'
# Database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sgpi

# Security
SECRET_KEY=development-secret-key-change-in-production

# MinIO
MINIO_ENDPOINT=localhost:9000
MINIO_SECURE=false
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=sgpi-files
MINIO_PUBLIC_ENDPOINT=localhost:9000
MINIO_PUBLIC_SECURE=false

# API
ENVIRONMENT=development
API_PORT=8009
EOF
        print_success ".env criado com configura√ß√µes padr√£o"
        print_warning "IMPORTANTE: Ajuste as configura√ß√µes no arquivo .env antes de usar em produ√ß√£o!"
    fi
else
    print_success ".env j√° existe"
fi

echo ""
echo "=================================="
echo "üê≥ Docker Setup"
echo "=================================="

# Verificar se as redes Docker existem
if command -v docker &> /dev/null; then
    if ! docker network ls | grep -q nginx_proxy; then
        print_info "Criando rede Docker nginx_proxy..."
        docker network create nginx_proxy
        print_success "Rede nginx_proxy criada"
    else
        print_success "Rede nginx_proxy j√° existe"
    fi
fi

echo ""
echo "=================================="
echo "‚úÖ Setup Completo!"
echo "=================================="
echo ""
echo "Pr√≥ximos passos:"
echo ""
echo "1. Ajuste as configura√ß√µes no arquivo .env (se necess√°rio)"
echo ""
echo "2. Inicie os servi√ßos com Docker Compose:"
echo "   $ docker-compose up -d"
echo ""
echo "   Ou apenas o banco e MinIO:"
echo "   $ docker-compose up -d postgres minio"
echo ""
echo "3. Execute as migrations:"
echo "   $ source venv/bin/activate"
echo "   $ alembic upgrade head"
echo ""
echo "4. Inicie a aplica√ß√£o:"
echo "   $ uvicorn app.main:app --reload --port 8009"
echo ""
echo "5. Acesse a documenta√ß√£o da API:"
echo "   http://localhost:8009/docs"
echo ""
echo "=================================="
print_success "Ambiente pronto para desenvolvimento! üéâ"
echo "=================================="

